{"name": "test_survey_buttons[firefox]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: WebDriver session does not exist, or is not active\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nInvalidSessionIDError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:469:5\nassert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:559:13\nassert.session@chrome://remote/content/shared/webdriver/Assert.sys.mjs:37:4\ndespatch@chrome://remote/content/marionette/server.sys.mjs:315:19\nexecute@chrome://remote/content/marionette/server.sys.mjs:289:16\nonPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nonPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20", "trace": "driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"d4db2fc9-915f-49c6-b384-78ac5093f5b3\")>\n\n    @allure.epic(\"Survey Management System\")\n    @allure.feature(\"UI Testing\")\n    @allure.story(\"Button Functionality\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.tag(\"CI\", \"Headless\", \"Automation\")\n    @pytest.mark.parametrize(\"driver\", [\"chrome\", \"firefox\"], indirect=True)\n    def test_survey_buttons(driver):\n        passed, failed = 0, 0\n        browser_name = driver.browser_name  # הוצא את השם\n        driver = driver.driver  # הוצא את הדרייבר האמיתי\n    \n        allure.dynamic.description(f\"Test running on {browser_name.capitalize()}\")\n    \n        allure_results_dir = f\"allure-results_{browser_name}\"\n    \n        buttons = [\n            {\"name\": \"ניהול הסקר\", \"xpath\": \"//a[contains(text(), 'ניהול הסקר')]\"},\n            {\"name\": \"ניהול סוציומטרי\", \"xpath\": \"//a[contains(text(), 'ניהול סוציומטרי')]\"},\n            {\"name\": \"עונות\", \"xpath\": \"//input[contains(@value, 'עונות')]\"},\n            {\"name\": \"שאלות חובה\", \"xpath\": \"//input[contains(@value, 'שאלות חובה')]\"},\n            {\"name\": \"חוקים לבדיקת שאלונים חריגים\", \"xpath\": \"//input[contains(@value, 'חוקים לבדיקת שאלונים חריגים')]\"},\n            {\"name\": \"חוקים על שאלות\", \"xpath\": \"//input[contains(@value, 'חוקים על שאלות')]\"},\n            {\"name\": \"כללי השתתפות לפי סוג יחידה\", \"xpath\": \"//input[contains(@value, 'כללי השתתפות לפי סוג יחידה')]\"},\n            {\"name\": \"הגדרת השדות שיופיעו בטבלאות\", \"xpath\": \"//input[contains(@value, 'הגדרת השדות שיופיעו בטבלאות')]\"},\n            {\"name\": \"אופציות לסוציומטרי\", \"xpath\": \"//input[contains(@value, 'אופציות לסוציומטרי')]\"},\n            {\"name\": \"הגדרה וניהול סטטוסים לאירועים\", \"xpath\": \"//input[contains(@value, 'הגדרה וניהול סטטוסים לאירועים')]\"},\n            {\"name\": \"סיבות להוספת או הסרת משתתפים באירוע\", \"xpath\": \"//input[contains(@value, 'סיבות להוספת או הסרת משתתפים באירוע')]\"},\n            #{\"name\": \"הגדרת שאלונים בהם מותר למחוק נתונים\", \"xpath\": \"//input[contains(@value, 'הגדרת שאלונים בהם מותר למחוק נתונים')]\"},\n            #{\"name\": \"רשימת אשכולות לאיגוד קבוצות של היגדים\", \"xpath\": \"//input[contains(@value, 'רשימת אשכולות לאיגוד קבוצות של היגדים')]\"},\n            #{\"name\": \"העברת משיבים ממאגר\", \"xpath\": \"//input[contains(@value, 'העברת משיבים ממאגר')]\"},\n            #\"name\": \"ניהול הרשאות משתמשים\", \"xpath\": \"//input[contains(@value, 'ניהול הרשאות משתמשים')]\"},\n            #\"name\": \"של פוטנציאל המשתתפים בסוציומטרי\", \"xpath\": \"//input[contains(@value, 'של פוטנציאל המשתתפים בסוציומטרי')]\"},\n            {\"name\": \"הגדרת חוקי העתקה של נתונים מחושבים לשאלון העזר\", \"xpath\": \"//input[contains(@value, 'הגדרת חוקי העתקה של נתונים מחושבים לשאלון העזר')]\"},\n            {\"name\": \"הגדרת כללים לחוקות חישוב\", \"xpath\": \"//input[contains(@value, 'הגדרת כללים לחוקות חישוב')]\"},\n            {\"name\": \"עריכה שדות במאגר המשיבים\", \"xpath\": \"//input[contains(@value, 'עריכה שדות במאגר המשיבים')]\"},\n            {\"name\": \"ייצוא דוחות אישיים\", \"xpath\": \"//input[contains(@value, 'ייצוא דוחות אישיים')]\"},\n            {\"name\": \"שיוך יחידות לאשכול\", \"xpath\": \"//input[contains(@value, 'שיוך יחידות לאשכול')]\"},\n            {\"name\": \"פלט אישי בתיקיית עובד\", \"xpath\": \"//input[contains(@value, 'פלט אישי בתיקיית עובד')]\"},\n            {\"name\": \"ניהול אירועים\", \"xpath\": \"//input[contains(@value, 'ניהול אירועים')]\"}\n        ]\n    \n        try:\n            with allure.step(f\"Login to the system using {browser_name.capitalize()}\"):\n                driver.get(\"https://www.survey.co.il/pms/MMDANEW/default.asp\")\n                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, \"login\")))\n    \n                driver.find_element(By.NAME, \"login\").send_keys(\"MARINAS\")\n                driver.find_element(By.NAME, \"password\").send_keys(\"Ms123456\", Keys.RETURN)\n            with allure.step(f\"Navigate to main management page using {browser_name.capitalize()}\"):\n                manage_survey_button = WebDriverWait(driver, 10).until(\n                    EC.presence_of_element_located((By.XPATH, buttons[0][\"xpath\"]))\n                )\n                ActionChains(driver).move_to_element(manage_survey_button).perform()\n                time.sleep(0.5)\n                close_alert_if_present(driver)\n>               click_and_wait(driver, buttons[1][\"xpath\"])\n\ntest_survey.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nut.py:40: in click_and_wait\n    element = WebDriverWait(driver, wait_time).until(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:631: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:888: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018AD6AEE3C0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"WebDriver session does not exist, or is no...ionette/server.sys.mjs:263:9\\\\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: WebDriver session does not exist, or is not active\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nE       InvalidSessionIDError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:469:5\nE       assert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:559:13\nE       assert.session@chrome://remote/content/shared/webdriver/Assert.sys.mjs:37:4\nE       despatch@chrome://remote/content/marionette/server.sys.mjs:315:19\nE       execute@chrome://remote/content/marionette/server.sys.mjs:289:16\nE       onPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nE       onPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\nE       _onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "Test running on Firefox", "steps": [{"name": "Login to the system using Firefox", "status": "passed", "start": 1745228613723, "stop": 1745228616984}, {"name": "Navigate to main management page using Firefox", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: WebDriver session does not exist, or is not active\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:199:5\nInvalidSessionIDError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:469:5\nassert.that/<@chrome://remote/content/shared/webdriver/Assert.sys.mjs:559:13\nassert.session@chrome://remote/content/shared/webdriver/Assert.sys.mjs:37:4\ndespatch@chrome://remote/content/marionette/server.sys.mjs:315:19\nexecute@chrome://remote/content/marionette/server.sys.mjs:289:16\nonPacket/<@chrome://remote/content/marionette/server.sys.mjs:262:20\nonPacket@chrome://remote/content/marionette/server.sys.mjs:263:9\n_onJSONObjectReady/<@chrome://remote/content/marionette/transport.sys.mjs:494:20\n\n", "trace": "  File \"C:\\Users\\User\\Documents\\automation\\auto\\test_survey.py\", line 84, in test_survey_buttons\n    click_and_wait(driver, buttons[1][\"xpath\"])\n    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\Documents\\automation\\auto\\ut.py\", line 40, in click_and_wait\n    element = WebDriverWait(driver, wait_time).until(\n        EC.element_to_be_clickable((By.XPATH, xpath))\n    )\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 137, in until\n    value = method(self._driver)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py\", line 631, in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 888, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1745228616984, "stop": 1745228620798}], "attachments": [{"name": "log", "source": "71cd505b-bcde-45f4-aed1-4548de9886bc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1745228613723, "stop": 1745228623100, "uuid": "057c7aed-26b5-4fd4-ac30-ce6d699a9f17", "historyId": "b38641a9bfc2c9d174f29deca20206f8", "testCaseId": "1012d322416ce512377685883317049b", "fullName": "test_survey#test_survey_buttons", "labels": [{"name": "tag", "value": "CI"}, {"name": "tag", "value": "Automation"}, {"name": "story", "value": "Button Functionality"}, {"name": "tag", "value": "Headless"}, {"name": "epic", "value": "Survey Management System"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "UI Testing"}, {"name": "suite", "value": "test_survey"}, {"name": "host", "value": "DESKTOP-G8GD8K9"}, {"name": "thread", "value": "13992-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_survey"}]}