{"name": "test_survey_buttons", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=54637): Max retries exceeded with url: /session/02782ecf4f7d12630ee58904b1b9b197/execute/sync (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002950460AD70>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))", "trace": "self = <urllib3.connectionpool.HTTPConnectionPool object at 0x000002950469C050>, method = 'POST'\nurl = '/session/02782ecf4f7d12630ee58904b1b9b197/element/f.D1A1DFEC156A3E574D579FBAF6AF5DCD.d.308D1866C55D1B0C3E90DE57AB21A31F.e.13/value'\nbody = '{\"text\": \"Ms123456\", \"value\": [\"M\", \"s\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]}'\nheaders = HTTPHeaderDict({'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.28.1 (python windows)', 'Connection': 'keep-alive'})\nretries = Retry(total=3, connect=None, read=None, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = 120, pool_timeout = None, release_conn = True, chunked = False, body_pos = None\npreload_content = True, decode_content = True, response_kw = {}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/session/02782ecf4f7d12630ee58904b1b9b197/element/f.D1A1DFEC156A3E574D579FBAF6AF5DCD.d.308D1866C55D1B0C3E90DE57AB21A31F.e.13/value', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True, http_tunnel_required = False, err = None\nclean_exit = False\n\n    def urlopen(  # type: ignore[override]\n        self,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | bool | int | None = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        pool_timeout: int | None = None,\n        release_conn: bool | None = None,\n        chunked: bool = False,\n        body_pos: _TYPE_BODY_POSITION | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        **response_kw: typing.Any,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method\n           such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param bool preload_content:\n            If True, the response's body will be preloaded into memory.\n    \n        :param bool decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of ``preload_content``\n            which defaults to ``True``.\n    \n        :param bool chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n        \"\"\"\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = preload_content\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = to_str(_encode_target(url))\n        else:\n            url = to_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()  # type: ignore[attr-defined]\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n    \n            # Is this a closed/new connection that requires CONNECT tunnelling?\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\n                try:\n                    self._prepare_proxy(conn)\n                except (BaseSSLError, OSError, SocketTimeout) as e:\n                    self._raise_timeout(\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\n                    )\n                    raise\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Make the request on the HTTPConnection object\n>           response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                retries=retries,\n                response_conn=response_conn,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                **response_kw,\n            )\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:787: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:534: in _make_request\n    response = conn.getresponse()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:516: in getresponse\n    httplib_response = super().getresponse()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1428: in getresponse\n    response.begin()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:331: in begin\n    version, status, reason = self._read_status()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:292: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <socket.SocketIO object at 0x00000295040B3E80>, b = <memory at 0x0000029504639300>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        try:\n>           return self._sock.recv_into(b)\nE           ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py:719: ConnectionResetError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.epic(\"מערכת ניהול סקרים\")\n    @allure.feature(\"ניהול סקרים\")\n    @allure.story(\"בדיקת לחצנים באתר תמורות\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.tag(\"Selenium\", \"UI\", \"Regression\", \"Automation\")\n    @allure.description_html(\"\"\"\n        <h2>תיאור הבדיקה</h2>\n        <p>בדיקה מקיפה של לחצנים באתר ניהול סקרים, הכוללת מעבר בין מסכים ובדיקות פנימיות\n        על רכיבי ממשק שונים. הבדיקה כוללת:</p>\n        <ul>\n          <li>כניסה למסך ניהול סקרים והתחברות עם שם משתמש וסיסמה.</li>\n          <li>מעבר בין מסכים כמו 'עונות', 'שאלות חובה' ו'חוקים על שאלות'.</li>\n          <li>בדיקות פנימיות הכוללות לחיצות, חזרה למסך הקודם והקלדה בתיבות חיפוש.</li>\n          <li>תיעוד מפורט של כל שלב בדוח Allure.</li>\n        </ul>\n    \"\"\")\n    def test_survey_buttons():\n        driver = webdriver.Chrome()  # פתיחת דפדפן Chrome\n        passed = 0  # ספירת הצלחות\n        failed = 0  # ספירת כישלונות\n    \n        # רשימת הכפתורים במסך ניהול סוציומטרי\n        buttons = [\n            {\"name\": \"ניהול הסקר\", \"xpath\": \"//a[contains(text(), 'ניהול הסקר')]\"},\n            {\"name\": \"ניהול סוציומטרי\", \"xpath\": \"//a[contains(text(), 'ניהול סוציומטרי')]\"},\n            {\"name\": \"עונות\", \"xpath\": \"//input[contains(@value, 'עונות')]\"},\n            {\"name\": \"שאלות חובה\", \"xpath\": \"//input[contains(@value, 'שאלות חובה')]\"},\n            {\"name\": \"חוקים לבדיקת שאלונים חריגים\", \"xpath\": \"//input[contains(@value, 'חוקים לבדיקת שאלונים חריגים')]\"},\n            {\"name\": \"חוקים על שאלות\", \"xpath\": \"//input[contains(@value, 'חוקים על שאלות')]\"},\n            {\"name\": \"כללי השתתפות לפי סוג יחידה\", \"xpath\": \"//input[contains(@value, 'כללי השתתפות לפי סוג יחידה')]\"},\n            {\"name\": \"הגדרת השדות שיופיעו בטבלאות\", \"xpath\": \"//input[contains(@value, 'הגדרת השדות שיופיעו בטבלאות')]\"},\n            {\"name\": \"אופציות לסוציומטרי\", \"xpath\": \"//input[contains(@value, 'אופציות לסוציומטרי')]\"},\n            {\"name\": \"הגדרה וניהול סטטוסים לאירועים\", \"xpath\": \"//input[contains(@value, 'הגדרה וניהול סטטוסים לאירועים')]\"},\n            {\"name\": \"סיבות להוספת או הסרת משתתפים באירוע\", \"xpath\": \"//input[contains(@value, 'סיבות להוספת או הסרת משתתפים באירוע')]\"},\n            {\"name\": \"הגדרת כללי חריגות בגין מידת היכרות\", \"xpath\": \"//input[contains(@value, 'הגדרת שאלונים בהם מותר למחוק נתונים')]\"},  # עדכון XPath לפי הצורך\n            {\"name\": \"רשימת אשכולות לאיגוד קבוצות של היגדים\", \"xpath\": \"//input[contains(@value, 'רשימת אשכולות לאיגוד קבוצות של היגדים')]\"},\n            {\"name\": \"העברת משיבים ממאגר\", \"xpath\": \"//input[contains(@value, 'העברת משיבים ממאגר')]\"},\n            {\"name\": \"ניהול הרשאות משתמשים\", \"xpath\": \"//input[contains(@value, 'ניהול הרשאות משתמשים')]\"},\n            {\"name\": \"של פוטנציאל המשתתפים בסוציומטרי\", \"xpath\": \"//input[contains(@value, 'של פוטנציאל המשתתפים בסוציומטרי')]\"},\n            {\"name\": \"הגדרת חוקי העתקה של נתונים מחושבים לשאלון העזר\", \"xpath\": \"//input[contains(@value, 'הגדרת חוקי העתקה של נתונים מחושבים לשאלון העזר')]\"},\n            {\"name\": \"הגדרת כללים לחוקות חישוב\", \"xpath\": \"//input[contains(@value, 'הגדרת כללים לחוקות חישוב')]\"},\n            {\"name\": \"עריכה שדות במאגר המשיבים\", \"xpath\": \"//input[contains(@value, 'עריכה שדות במאגר המשיבים')]\"},\n            {\"name\": \"הגדרת שאלונים בהם מותר למחוק נתונים\", \"xpath\": \"//input[contains(@value, 'הגדרת שאלונים בהם מותר למחוק נתונים')]\"},\n            {\"name\": \"ייצוא דוחות אישיים\", \"xpath\": \"//input[contains(@value, 'ייצוא דוחות אישיים')]\"},\n            {\"name\": \"שיוך יחידות לאשכול\", \"xpath\": \"//input[contains(@value, 'שיוך יחידות לאשכול')]\"},\n            {\"name\": \"פלט אישי בתיקיית עובד\", \"xpath\": \"//input[contains(@value, 'פלט אישי בתיקיית עובד')]\"},\n             {\"name\": \"ניהול אירועים\", \"xpath\": \"//input[contains(@value, 'ניהול אירועים')]\"},\n        ]\n    \n        def close_alert_if_present():\n            \"\"\"\n            בודקת אם יש חלון Alert פתוח, ואם כן, סוגרת אותו.\n            \"\"\"\n            try:\n                alert = Alert(driver)\n                alert.accept()\n                allure.attach(\"חלון Alert נסגר בהצלחה\", name=\"Alert\", attachment_type=allure.attachment_type.TEXT)\n            except Exception as e:\n                allure.attach(f\"הודעת Alert לא נמצאה: {e}\", name=\"Alert Info\", attachment_type=allure.attachment_type.TEXT)\n    \n        try:\n            with allure.step(\"פתיחת האתר והתחברות\"):\n                driver.get(\"https://www.survey.co.il/pms/MMDANEW/default.asp\")\n                time.sleep(0.5)\n                username = driver.find_element(By.NAME, \"login\")\n                password = driver.find_element(By.NAME, \"password\")\n                username.send_keys(\"MARINAS\")\n>               password.send_keys(\"Ms123456\")\n\nauto\\test_survey.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:301: in send_keys\n    self._execute(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:143: in request\n    return self.request_encode_body(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:278: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py:443: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:841: in urlopen\n    retries = retries.increment(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py:474: in increment\n    raise reraise(type(error), error, _stacktrace)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py:38: in reraise\n    raise value.with_traceback(tb)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:787: in urlopen\n    response = self._make_request(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:534: in _make_request\n    response = conn.getresponse()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:516: in getresponse\n    httplib_response = super().getresponse()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1428: in getresponse\n    response.begin()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:331: in begin\n    version, status, reason = self._read_status()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:292: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <socket.SocketIO object at 0x00000295040B3E80>, b = <memory at 0x0000029504639300>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        try:\n>           return self._sock.recv_into(b)\nE           urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py:719: ProtocolError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connection.HTTPConnection object at 0x000002950460AD70>\n\n    def _new_conn(self) -> socket.socket:\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        try:\n>           sock = connection.create_connection(\n                (self._dns_host, self.port),\n                self.timeout,\n                source_address=self.source_address,\n                socket_options=self.socket_options,\n            )\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:198: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\connection.py:85: in create_connection\n    raise err\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('localhost', 54637), timeout = 120, source_address = None, socket_options = [(6, 1, 1)]\n\n    def create_connection(\n        address: tuple[str, int],\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        source_address: tuple[str, int] | None = None,\n        socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n    ) -> socket.socket:\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith(\"[\"):\n            host = host.strip(\"[]\")\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        try:\n            host.encode(\"idna\")\n        except UnicodeError:\n            raise LocationParseError(f\"'{host}', label empty or too long\") from None\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not _DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] No connection could be made because the target machine actively refused it\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\connection.py:73: ConnectionRefusedError\n\nThe above exception was the direct cause of the following exception:\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x000002950469C050>, method = 'POST'\nurl = '/session/02782ecf4f7d12630ee58904b1b9b197/execute/sync'\nbody = '{\"script\": \"new Audio(\\'https://www.soundjay.com/button/beep-07.wav\\').play();\", \"args\": []}'\nheaders = HTTPHeaderDict({'Accept': 'application/json', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.28.1 (python windows)', 'Connection': 'keep-alive'})\nretries = Retry(total=0, connect=None, read=None, redirect=None, status=None), redirect = False\nassert_same_host = False, timeout = 120, pool_timeout = None, release_conn = True, chunked = False, body_pos = None\npreload_content = True, decode_content = True, response_kw = {}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/session/02782ecf4f7d12630ee58904b1b9b197/execute/sync', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True, http_tunnel_required = False, err = None\nclean_exit = False\n\n    def urlopen(  # type: ignore[override]\n        self,\n        method: str,\n        url: str,\n        body: _TYPE_BODY | None = None,\n        headers: typing.Mapping[str, str] | None = None,\n        retries: Retry | bool | int | None = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        pool_timeout: int | None = None,\n        release_conn: bool | None = None,\n        chunked: bool = False,\n        body_pos: _TYPE_BODY_POSITION | None = None,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        **response_kw: typing.Any,\n    ) -> BaseHTTPResponse:\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method\n           such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param bool preload_content:\n            If True, the response's body will be preloaded into memory.\n    \n        :param bool decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of ``preload_content``\n            which defaults to ``True``.\n    \n        :param bool chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n        \"\"\"\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = preload_content\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = to_str(_encode_target(url))\n        else:\n            url = to_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()  # type: ignore[attr-defined]\n            headers.update(self.proxy_headers)  # type: ignore[union-attr]\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n    \n            # Is this a closed/new connection that requires CONNECT tunnelling?\n            if self.proxy is not None and http_tunnel_required and conn.is_closed:\n                try:\n                    self._prepare_proxy(conn)\n                except (BaseSSLError, OSError, SocketTimeout) as e:\n                    self._raise_timeout(\n                        err=e, url=self.proxy.url, timeout_value=conn.timeout\n                    )\n                    raise\n    \n            # If we're going to release the connection in ``finally:``, then\n            # the response doesn't need to know about the connection. Otherwise\n            # it will also try to release it and we'll have a double-release\n            # mess.\n            response_conn = conn if not release_conn else None\n    \n            # Make the request on the HTTPConnection object\n>           response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n                retries=retries,\n                response_conn=response_conn,\n                preload_content=preload_content,\n                decode_content=decode_content,\n                **response_kw,\n            )\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:787: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:493: in _make_request\n    conn.request(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:445: in request\n    self.endheaders()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1331: in endheaders\n    self._send_output(message_body, encode_chunked=encode_chunked)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1091: in _send_output\n    self.send(msg)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py:1035: in send\n    self.connect()\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:276: in connect\n    self.sock = self._new_conn()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000002950460AD70>\n\n    def _new_conn(self) -> socket.socket:\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        try:\n            sock = connection.create_connection(\n                (self._dns_host, self.port),\n                self.timeout,\n                source_address=self.source_address,\n                socket_options=self.socket_options,\n            )\n        except socket.gaierror as e:\n            raise NameResolutionError(self.host, self, e) from e\n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self,\n                f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n            ) from e\n    \n        except OSError as e:\n>           raise NewConnectionError(\n                self, f\"Failed to establish a new connection: {e}\"\n            ) from e\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x000002950460AD70>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py:213: NewConnectionError\n\nThe above exception was the direct cause of the following exception:\n\n    @allure.epic(\"מערכת ניהול סקרים\")\n    @allure.feature(\"ניהול סקרים\")\n    @allure.story(\"בדיקת לחצנים באתר תמורות\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.tag(\"Selenium\", \"UI\", \"Regression\", \"Automation\")\n    @allure.description_html(\"\"\"\n        <h2>תיאור הבדיקה</h2>\n        <p>בדיקה מקיפה של לחצנים באתר ניהול סקרים, הכוללת מעבר בין מסכים ובדיקות פנימיות\n        על רכיבי ממשק שונים. הבדיקה כוללת:</p>\n        <ul>\n          <li>כניסה למסך ניהול סקרים והתחברות עם שם משתמש וסיסמה.</li>\n          <li>מעבר בין מסכים כמו 'עונות', 'שאלות חובה' ו'חוקים על שאלות'.</li>\n          <li>בדיקות פנימיות הכוללות לחיצות, חזרה למסך הקודם והקלדה בתיבות חיפוש.</li>\n          <li>תיעוד מפורט של כל שלב בדוח Allure.</li>\n        </ul>\n    \"\"\")\n    def test_survey_buttons():\n        driver = webdriver.Chrome()  # פתיחת דפדפן Chrome\n        passed = 0  # ספירת הצלחות\n        failed = 0  # ספירת כישלונות\n    \n        # רשימת הכפתורים במסך ניהול סוציומטרי\n        buttons = [\n            {\"name\": \"ניהול הסקר\", \"xpath\": \"//a[contains(text(), 'ניהול הסקר')]\"},\n            {\"name\": \"ניהול סוציומטרי\", \"xpath\": \"//a[contains(text(), 'ניהול סוציומטרי')]\"},\n            {\"name\": \"עונות\", \"xpath\": \"//input[contains(@value, 'עונות')]\"},\n            {\"name\": \"שאלות חובה\", \"xpath\": \"//input[contains(@value, 'שאלות חובה')]\"},\n            {\"name\": \"חוקים לבדיקת שאלונים חריגים\", \"xpath\": \"//input[contains(@value, 'חוקים לבדיקת שאלונים חריגים')]\"},\n            {\"name\": \"חוקים על שאלות\", \"xpath\": \"//input[contains(@value, 'חוקים על שאלות')]\"},\n            {\"name\": \"כללי השתתפות לפי סוג יחידה\", \"xpath\": \"//input[contains(@value, 'כללי השתתפות לפי סוג יחידה')]\"},\n            {\"name\": \"הגדרת השדות שיופיעו בטבלאות\", \"xpath\": \"//input[contains(@value, 'הגדרת השדות שיופיעו בטבלאות')]\"},\n            {\"name\": \"אופציות לסוציומטרי\", \"xpath\": \"//input[contains(@value, 'אופציות לסוציומטרי')]\"},\n            {\"name\": \"הגדרה וניהול סטטוסים לאירועים\", \"xpath\": \"//input[contains(@value, 'הגדרה וניהול סטטוסים לאירועים')]\"},\n            {\"name\": \"סיבות להוספת או הסרת משתתפים באירוע\", \"xpath\": \"//input[contains(@value, 'סיבות להוספת או הסרת משתתפים באירוע')]\"},\n            {\"name\": \"הגדרת כללי חריגות בגין מידת היכרות\", \"xpath\": \"//input[contains(@value, 'הגדרת שאלונים בהם מותר למחוק נתונים')]\"},  # עדכון XPath לפי הצורך\n            {\"name\": \"רשימת אשכולות לאיגוד קבוצות של היגדים\", \"xpath\": \"//input[contains(@value, 'רשימת אשכולות לאיגוד קבוצות של היגדים')]\"},\n            {\"name\": \"העברת משיבים ממאגר\", \"xpath\": \"//input[contains(@value, 'העברת משיבים ממאגר')]\"},\n            {\"name\": \"ניהול הרשאות משתמשים\", \"xpath\": \"//input[contains(@value, 'ניהול הרשאות משתמשים')]\"},\n            {\"name\": \"של פוטנציאל המשתתפים בסוציומטרי\", \"xpath\": \"//input[contains(@value, 'של פוטנציאל המשתתפים בסוציומטרי')]\"},\n            {\"name\": \"הגדרת חוקי העתקה של נתונים מחושבים לשאלון העזר\", \"xpath\": \"//input[contains(@value, 'הגדרת חוקי העתקה של נתונים מחושבים לשאלון העזר')]\"},\n            {\"name\": \"הגדרת כללים לחוקות חישוב\", \"xpath\": \"//input[contains(@value, 'הגדרת כללים לחוקות חישוב')]\"},\n            {\"name\": \"עריכה שדות במאגר המשיבים\", \"xpath\": \"//input[contains(@value, 'עריכה שדות במאגר המשיבים')]\"},\n            {\"name\": \"הגדרת שאלונים בהם מותר למחוק נתונים\", \"xpath\": \"//input[contains(@value, 'הגדרת שאלונים בהם מותר למחוק נתונים')]\"},\n            {\"name\": \"ייצוא דוחות אישיים\", \"xpath\": \"//input[contains(@value, 'ייצוא דוחות אישיים')]\"},\n            {\"name\": \"שיוך יחידות לאשכול\", \"xpath\": \"//input[contains(@value, 'שיוך יחידות לאשכול')]\"},\n            {\"name\": \"פלט אישי בתיקיית עובד\", \"xpath\": \"//input[contains(@value, 'פלט אישי בתיקיית עובד')]\"},\n             {\"name\": \"ניהול אירועים\", \"xpath\": \"//input[contains(@value, 'ניהול אירועים')]\"},\n        ]\n    \n        def close_alert_if_present():\n            \"\"\"\n            בודקת אם יש חלון Alert פתוח, ואם כן, סוגרת אותו.\n            \"\"\"\n            try:\n                alert = Alert(driver)\n                alert.accept()\n                allure.attach(\"חלון Alert נסגר בהצלחה\", name=\"Alert\", attachment_type=allure.attachment_type.TEXT)\n            except Exception as e:\n                allure.attach(f\"הודעת Alert לא נמצאה: {e}\", name=\"Alert Info\", attachment_type=allure.attachment_type.TEXT)\n    \n        try:\n            with allure.step(\"פתיחת האתר והתחברות\"):\n                driver.get(\"https://www.survey.co.il/pms/MMDANEW/default.asp\")\n                time.sleep(0.5)\n                username = driver.find_element(By.NAME, \"login\")\n                password = driver.find_element(By.NAME, \"password\")\n                username.send_keys(\"MARINAS\")\n                password.send_keys(\"Ms123456\")\n                password.send_keys(Keys.RETURN)\n                time.sleep(0.5)\n                allure.attach(driver.current_url, name=\"כתובת האתר לאחר התחברות\", attachment_type=allure.attachment_type.TEXT)\n    \n            with allure.step(\"מעבר למסך ניהול סוציומטרי\"):\n                close_alert_if_present()\n                manage_survey_button = WebDriverWait(driver, 10).until(\n                    EC.presence_of_element_located((By.XPATH, buttons[0][\"xpath\"]))\n                )\n                actions = ActionChains(driver)\n                actions.move_to_element(manage_survey_button).perform()\n                time.sleep(0.5)\n                close_alert_if_present()\n                soc_button = WebDriverWait(driver, 10).until(\n                    EC.element_to_be_clickable((By.XPATH, buttons[1][\"xpath\"]))\n                )\n                soc_button.click()\n                time.sleep(0.5)\n                allure.attach(driver.current_url, name=\"כתובת האתר במסך סוציומטרי\", attachment_type=allure.attachment_type.TEXT)\n    \n            # מעבר על שאר הכפתורים במסך ניהול סוציומטרי\n            for button in buttons[2:22]:\n                if button[\"name\"] == \"עונות\":\n                    with allure.step(\"בדיקות פנימיות עבור 'עונות'\"):\n                        close_alert_if_present()\n                        seasons_button = WebDriverWait(driver, 10).until(\n                            EC.element_to_be_clickable((By.XPATH, button[\"xpath\"]))\n                        )\n                        seasons_button.click()\n                        time.sleep(0.5)\n                        with allure.step(\"לחיצה על 'שאלות חובה לסוציומטרי' וחזרה\"):\n                            mandatory_btn = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.XPATH, \"//input[contains(@value, 'שאלות חובה לסוציומטרי')]\"))\n                            )\n                            mandatory_btn.click()\n                            time.sleep(0.5)\n                            driver.back()\n                            time.sleep(0.5)\n                            passed += 1\n                        with allure.step(\"לחיצה על 'שדות לפילטור' וחזרה\"):\n                            filter_btn = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.XPATH, \"//input[contains(@value, 'שדות לפילטור')]\"))\n                            )\n                            filter_btn.click()\n                            time.sleep(0.5)\n                            driver.back()\n                            time.sleep(0.5)\n                            passed += 1\n                        with allure.step(\"לחיצה על 'עריכה' וחזרה\"):\n                            edit_btn = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.XPATH, \"//input[contains(@value, 'עריכה')]\"))\n                            )\n                            edit_btn.click()\n                            time.sleep(0.5)\n                            driver.back()\n                            time.sleep(0.5)\n                            passed += 1\n                        with allure.step(\"לחיצה על 'פתח את ניהול' וחזרה\"):\n                            allure.attach(driver.get_screenshot_as_png(), name=\"Before Edit Click\", attachment_type=allure.attachment_type.PNG)\n                            open_mgmt_btn = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.XPATH, \"//input[contains(@value, 'פתח את ניהול')]\"))\n                            )\n                            open_mgmt_btn.click()\n                            time.sleep(0.5)\n                            allure.attach(driver.get_screenshot_as_png(), name=\"After Edit Click\", attachment_type=allure.attachment_type.PNG)\n                            driver.back()\n                            time.sleep(0.5)\n                            passed += 1\n                        with allure.step(\"יציאה ממסך 'עונות' וחזרה למסך ניהול סוציומטרי\"):\n                            driver.back()\n                            time.sleep(0.5)\n                        passed += 1\n                elif button[\"name\"] == \"שאלות חובה\":\n                    with allure.step(\"בדיקות פנימיות עבור 'שאלות חובה'\"):\n                        close_alert_if_present()\n                        questions_btn = WebDriverWait(driver, 10).until(\n                            EC.element_to_be_clickable((By.XPATH, button[\"xpath\"]))\n                        )\n                        questions_btn.click()\n                        time.sleep(0.5)\n                        with allure.step(\"לחיצה על 'ערוך' וחזרה\"):\n                            edit_btn = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.XPATH, \"//input[contains(@value, 'ערוך')]\"))\n                            )\n                            edit_btn.click()\n                            time.sleep(0.5)\n                            driver.back()\n                            time.sleep(0.5)\n                        passed += 1\n                        driver.back()\n                        time.sleep(0.5)\n                elif button[\"name\"] == \"חוקים על שאלות\":\n                    with allure.step(\"בדיקות פנימיות עבור 'חוקים על שאלות'\"):\n                        with allure.step(\"כניסה למסך 'חוקים על שאלות'\"):\n                            element = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.XPATH, button[\"xpath\"]))\n                            )\n                            element.click()\n                            time.sleep(1)\n                        with allure.step(\"הקלדה בתיבת החיפוש בתוך 'חוקים על שאלות'\"):\n                            search_input = WebDriverWait(driver, 10).until(\n                                EC.visibility_of_element_located((By.ID, \"dt-search-0\"))\n                            )\n                            search_input.clear()\n                            search_input.send_keys(\"שי אגיב שי אגיב\")\n                            time.sleep(0.5)\n                            passed += 1\n                        with allure.step(\"לחיצה על 'שאלון סוציומטרי' בתוך 'חוקים על שאלות'\"):\n                            combo = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.CSS_SELECTOR, \"svg.ss-arrow\"))\n                            )\n                            combo.click()\n                            time.sleep(0.5)\n                            passed += 1\n    \n                        driver.back()\n                        time.sleep(0.5)\n    \n                elif button[\"name\"] == \"כללי השתתפות לפי סוג יחידה\":\n                    with allure.step(\"בדיקות פנימיות עבור 'כללי השתתפות לפי סוג יחידה'\"):\n                        close_alert_if_present()\n                        unit_participation_btn = WebDriverWait(driver, 10).until(\n                            EC.element_to_be_clickable((By.XPATH, button[\"xpath\"]))\n                        )\n                        unit_participation_btn.click()\n                        time.sleep(0.5)\n                        with allure.step(\"לחיצה על 'הוסף ימי היעדרות' וחזרה\"):\n                            add_absence_btn = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.XPATH, \"//input[contains(@value, 'הוסף ימי היעדרות')]\"))\n                            )\n                            add_absence_btn.click()\n                            time.sleep(0.5)\n                            driver.back()\n                            time.sleep(0.5)\n                            driver.back()\n                            time.sleep(0.5)\n                            passed += 1\n                elif button[\"name\"] == \"אופציות לסוציומטרי\":\n                    with allure.step(\"בדיקות פנימיות עבור 'אופציות לסוציומטרי'\"):\n                        options_button = WebDriverWait(driver, 10).until(\n                            EC.element_to_be_clickable((By.XPATH, button[\"xpath\"]))\n                        )\n                        options_button.click()\n                        time.sleep(0.5)\n    \n                        with allure.step(\"לחיצה על 'שמור' וחזרה\"):\n                            save_button = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.XPATH, \"//input[contains(@value, 'שמור')]\"))\n                            )\n                            save_button.click()\n                            time.sleep(0.5)\n                            driver.execute_script(\"\"\"\n                                  var message = document.createElement('div');\n                                  message.innerText = '✅ לחצתי על שמור!';\n                                  message.style.position = 'fixed';\n             message.style.top = '20px';\n            message.style.right = '20px';\n            message.style.backgroundColor = 'green';\n            message.style.color = 'white';\n            message.style.padding = '10px';\n            message.style.borderRadius = '5px';\n            message.style.zIndex = '9999';\n            message.style.fontSize = '20px';\n            document.body.appendChild(message);\n            setTimeout(function(){ message.remove(); }, 10000); // ההודעה תיעלם אחרי 3 שניות\n        \"\"\")\n                            driver.back()\n    \n                        passed += 1\n                        driver.back()\n                        time.sleep(0.5)\n    \n    \n                else:\n                    with allure.step(f\"בדיקת כפתור '{button['name']}'\"):\n                        try:\n                            close_alert_if_present()\n                            element = WebDriverWait(driver, 10).until(\n                                EC.element_to_be_clickable((By.XPATH, button[\"xpath\"]))\n                            )\n                            element.click()\n                            allure.attach(f\"לחיצה על '{button['name']}' הצליחה\", name=\"לחיצה\", attachment_type=allure.attachment_type.TEXT)\n                            passed += 1\n                            time.sleep(0.5)\n                            driver.back()\n                            time.sleep(0.5)\n                        except Exception as e:\n                            allure.attach(f\"לחיצה על '{button['name']}' נכשלה! שגיאה: {e}\", name=\"שגיאה\", attachment_type=allure.attachment_type.TEXT)\n                            failed += 1\n    \n    \n    \n    \n    \n    \n    \n    \n        finally:\n            time.sleep(3.5)\n>           driver.execute_script(\"new Audio('https://www.soundjay.com/button/beep-07.wav').play();\")\n\nauto\\test_survey.py:281: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:528: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:427: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:404: in execute\n    return self._request(command_info[0], url, body=data)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:428: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:143: in request\n    return self.request_encode_body(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py:278: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py:443: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:871: in urlopen\n    return self.urlopen(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:871: in urlopen\n    return self.urlopen(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:871: in urlopen\n    return self.urlopen(\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py:841: in urlopen\n    retries = retries.increment(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None), method = 'POST'\nurl = '/session/02782ecf4f7d12630ee58904b1b9b197/execute/sync', response = None\nerror = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002950460AD70>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it')\n_pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x000002950469C050>\n_stacktrace = <traceback object at 0x000002950476C500>\n\n    def increment(\n        self,\n        method: str | None = None,\n        url: str | None = None,\n        response: BaseHTTPResponse | None = None,\n        error: Exception | None = None,\n        _pool: ConnectionPool | None = None,\n        _stacktrace: TracebackType | None = None,\n    ) -> Self:\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.BaseHTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or method is None or not self._is_method_retryable(method):\n                raise reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            response_redirect_location = response.get_redirect_location()\n            if response_redirect_location:\n                redirect_location = response_redirect_location\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n            reason = error or ResponseError(cause)\n>           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\nE           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=54637): Max retries exceeded with url: /session/02782ecf4f7d12630ee58904b1b9b197/execute/sync (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002950460AD70>: Failed to establish a new connection: [WinError 10061] No connection could be made because the target machine actively refused it'))\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py:519: MaxRetryError"}, "descriptionHtml": "\n    <h2>תיאור הבדיקה</h2>\n    <p>בדיקה מקיפה של לחצנים באתר ניהול סקרים, הכוללת מעבר בין מסכים ובדיקות פנימיות\n    על רכיבי ממשק שונים. הבדיקה כוללת:</p>\n    <ul>\n      <li>כניסה למסך ניהול סקרים והתחברות עם שם משתמש וסיסמה.</li>\n      <li>מעבר בין מסכים כמו 'עונות', 'שאלות חובה' ו'חוקים על שאלות'.</li>\n      <li>בדיקות פנימיות הכוללות לחיצות, חזרה למסך הקודם והקלדה בתיבות חיפוש.</li>\n      <li>תיעוד מפורט של כל שלב בדוח Allure.</li>\n    </ul>\n", "steps": [{"name": "פתיחת האתר והתחברות", "status": "broken", "statusDetails": {"message": "urllib3.exceptions.ProtocolError: ('Connection aborted.', ConnectionResetError(10054, 'An existing connection was forcibly closed by the remote host', None, 10054, None))\n", "trace": "  File \"C:\\Users\\User\\Documents\\automation\\auto\\test_survey.py\", line 81, in test_survey_buttons\n    password.send_keys(\"Ms123456\")\n    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 301, in send_keys\n    self._execute(\n    ~~~~~~~~~~~~~^\n        Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 570, in _execute\n    return self._parent.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 427, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 404, in execute\n    return self._request(command_info[0], url, body=data)\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py\", line 428, in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py\", line 143, in request\n    return self.request_encode_body(\n           ~~~~~~~~~~~~~~~~~~~~~~~~^\n        method, url, fields=fields, headers=headers, **urlopen_kw\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\_request_methods.py\", line 278, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\poolmanager.py\", line 443, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n        method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n    )\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\util\\util.py\", line 38, in reraise\n    raise value.with_traceback(tb)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n        conn,\n    ...<10 lines>...\n        **response_kw,\n    )\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\urllib3\\connection.py\", line 516, in getresponse\n    httplib_response = super().getresponse()\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py\", line 1428, in getresponse\n    response.begin()\n    ~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\http\\client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\socket.py\", line 719, in readinto\n    return self._sock.recv_into(b)\n           ~~~~~~~~~~~~~~~~~~~~^^^\n"}, "start": 1744787563509, "stop": 1744787570404}], "attachments": [{"name": "log", "source": "e8a8cf4a-017c-45c1-81a9-f0e4fb402f39-attachment.txt", "type": "text/plain"}], "start": 1744787559487, "stop": 1744787590235, "uuid": "9685343c-da15-4ee5-92bf-8795d58b71b1", "historyId": "f62fb0bc9ba8d89356e81292b6fb5347", "testCaseId": "f62fb0bc9ba8d89356e81292b6fb5347", "fullName": "auto.test_survey#test_survey_buttons", "labels": [{"name": "epic", "value": "מערכת ניהול סקרים"}, {"name": "tag", "value": "Selenium"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "ניהול סקרים"}, {"name": "tag", "value": "Regression"}, {"name": "tag", "value": "Automation"}, {"name": "tag", "value": "UI"}, {"name": "story", "value": "בדיקת לחצנים באתר תמורות"}, {"name": "parentSuite", "value": "auto"}, {"name": "suite", "value": "test_survey"}, {"name": "host", "value": "DESKTOP-G8GD8K9"}, {"name": "thread", "value": "18396-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "auto.test_survey"}]}